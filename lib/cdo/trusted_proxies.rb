#require_relative '../../config/environment'
require 'cdo/aws/s3'

module TrustedProxies
  BUCKET_NAME = 'cdo-dist'.freeze
  FILENAME = 'trusted_proxies.json'.freeze
  IP_RANGES_URL = 'https://ip-ranges.amazonaws.com/ip-ranges.json'.freeze

  # Generate the trusted proxy list from the AWS IP ranges list that amazon publishes
  # Example:
  # {
  # "syncToken": "1448007736",
  # "createDate": "2015-11-20-09-22-15",
  # "prefixes": [
  #   {
  #     "ip_prefix": "23.20.0.0/14",
  #     "region": "us-east-1",
  #     "service": "AMAZON"
  #   },
  #   {
  #     "ip_prefix": "52.84.0.0/15",
  #     "region": "GLOBAL",
  #     "service": "CLOUDFRONT"
  #   },
  # ..
  def self.generate
    response = JSON.parse(Net::HTTP.get(URI(IP_RANGES_URL)))

    cloudfront_ips = response['prefixes'].
                 select {|ip_range| ip_range['service'] == 'CLOUDFRONT'}.
                 map {|ip_range| ip_range['ip_prefix']}

    output = {
      comment: "Generated by #{__FILE__} at #{Time.now} from #{IP_RANGES_URL}",
      syncToken: response['syncToken'],
      createDate: response['createDate'],
      ranges: cloudfront_ips
    }
    data = JSON.pretty_generate(output) + "\n"
    return data
  end

  # Uploads the trusted proxy list to s3
  def self.upload(data)
    client = AWS::S3.create_client
    client.put_object({bucket: BUCKET_NAME, key: FILENAME, body: data})
  end

  # Downloads the trusted proxy list from s3 as a list of IP range objects
  def self.get_from_s3
    client = AWS::S3.create_client
    proxy_list = JSON.parse(client.get_object({bucket: BUCKET_NAME, key: FILENAME}).body.read)
    ip_proxies = proxy_list['ranges'].map do |proxy|
      IPAddr.new(proxy)
    end
    return ip_proxies
  end
end
