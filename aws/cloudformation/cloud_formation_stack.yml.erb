---
AWSTemplateFormatVersion: 2010-09-09
Description: AWS CloudFormation Template for Code.org application
Parameters:
  InstanceType:
    Type: String
    Default: <%=INSTANCE_TYPE%>
  Branch:
    Type: String
    Default: <%=branch%>
<% if database -%>
  DatabaseUsername:
    Type: String
    Default: master
    MaxLength: 16
<% end -%>
Resources:
  # Stack-specific IAM permissions applied to both daemon and frontends.
  CDOPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: !Sub "Application permissions for ${AWS::StackName}."
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          # Read-only access to current secrets.
          - Effect: Allow
            Action: 'secretsmanager:GetSecretValue'
            Resource:
              - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:<%=environment%>/cdo/*"
<% if database -%>
              - !Ref DatabaseSecret
<% end -%>
            Condition:
              StringEquals:
                secretsmanager:VersionStage: AWSCURRENT
          # Read-only access to bootstrap scripts.
          - Effect: Allow
            Action: 's3:GetObject'
            Resource: 'arn:aws:s3:::cdo-dist/<%=environment%>/*'
          # Instance-bootstrap CloudFormation hook.
          - Effect: Allow
            Action: 'cloudformation:SignalResource'
            Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*"
          # Forward syslog to CloudWatch Logs via cdo-cloudwatch-logger.
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutRetentionPolicy'
              - 'logs:PutLogEvents'
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:<%=environment%>-syslog"
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:<%=environment%>-syslog:log-stream:*"
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWS::StackName}"
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWS::StackName}:log-stream:*"
          # Put custom metrics to CloudWatch.
          - Effect: Allow
            Action: 'cloudwatch:PutMetricData'
            Resource: '*'
          # Read EC2 tags to determine Auto Scaling Group in CloudWatch Monitoring Scripts.
          - Effect: Allow
            Action: 'ec2:DescribeTags'
            Resource: '*'
          # Read/Write DCDO and Gatekeeper tables.
          # TODO: Import resources into stack.
          - Effect: Allow
            Action:
              - 'dynamodb:GetItem'
              - 'dynamodb:PutItem'
              - 'dynamodb:Scan'
            Resource:
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/<%=CDO.dcdo_table_name%>"
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/<%=CDO.gatekeeper_table_name%>"
          # Write analysis events to Firehose.
          # TODO: Import resources into stack.
          - Effect: Allow
            Action:
            - 'firehose:PutRecord'
            - 'firehose:PutRecordBatch'
            Resource: !Sub "arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/analysis-events"
          # S3 access for student-libraries bucket
          - Effect: Allow
            Action:
              - 's3:DeleteObject'
              - 's3:DeleteObjectVersion'
              - 's3:GetObject'
              - 's3:GetObjectVersion'
              - 's3:PutObject'
              - 's3:ReplicateObject'
              - 's3:RestoreObject'
            Resource: 'arn:aws:s3:::cdo-v3-libraries/libraries_<%=environment%>/*'
          # General s3 access.
          # TODO: Further restrict permissions to grant least privilege.
          - Effect: Allow
            Action: 's3:*'
            Resource: '*'
<% if load_balancer -%>
  # TODO hourofcode.com and csedweek.org load balancers should be added to this template.
  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
<% raise "LoadBalancer name [#{stack_name}] cannot be longer than 32 characters" if stack_name.length > 32 -%>
      LoadBalancerName: !Ref AWS::StackName
      CrossZone: true
      SecurityGroups: [!ImportValue VPC-ELBSecurityGroup]
      Subnets: <%= public_subnets.to_json %>
      LBCookieStickinessPolicy:
        - PolicyName: CookieBasedPolicy
          CookieExpirationPeriod: 30
      Listeners:
        - LoadBalancerPort: 80
          InstancePort: 80
          Protocol: HTTP
          PolicyNames: [CookieBasedPolicy]
        - LoadBalancerPort: 443
          InstancePort: 80
          Protocol: HTTPS
          SSLCertificateId: <%=certificate_arn%>
          PolicyNames: [CookieBasedPolicy]
      HealthCheck:
        Target: HTTP:80/health_check
        HealthyThreshold: 2
        UnhealthyThreshold: 5
        Interval: 10
        Timeout: 5
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 300
<%   if !frontends && daemon_instance_id -%>
      Instances: [<%=daemon_instance_id%>]
<%   end -%>
<% end -%>

<% if frontends -%>
<%=
  file 'components/ami.yml.erb',
    frontend_policies: [Ref: 'CDOPolicy'],
    frontend_properties: {
      LoadBalancerNames: [Ref: 'LoadBalancer']
    },
    frontend_volume_size: 64,
    ami_timeout: 'PT120M',
    frontend_timeout: 'PT50M',
    build_frontend: file('bootstrap_frontend.sh.erb',
      node_name: 'fe-$INSTANCE_ID'
    ),
    build_ami: file('bootstrap_chef_stack.sh.erb',
      node_name: 'ami-$INSTANCE_ID',
      daemon: false,
      run_list: [local_mode ? 'recipe[cdo-apps]' : 'role[unmonitored-frontend]']
    )
%>
  WebServerHookEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub "Auto Scaling Events for ${AWS::StackName}."
      EventPattern:
        source: [aws.autoscaling]
        detail-type:
        - EC2 Instance Launch Successful
        - EC2 Instance Terminate Successful
        - EC2 Instance Launch Unsuccessful
        - EC2 Instance Terminate Unsuccessful
        - EC2 Instance-launch Lifecycle Action
        - EC2 Instance-terminate Lifecycle Action
        detail:
          AutoScalingGroupName: [!Ref Frontends]
      State: ENABLED
      Targets:
      - Arn: !ImportValue SlackEvent
        Id: WebServerHookTarget
  WebServerHookEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !ImportValue SlackEvent
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt WebServerHookEventRule.Arn
<%  if environment == :production -%>
  HealthEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub "Health Events for ${AWS::StackName}."
      EventPattern:
        source: [aws.health]
      State: ENABLED
      Targets:
      - Arn: !ImportValue SlackEvent
        Id: HealthEventRuleTarget
  HealthEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !ImportValue SlackEvent
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt HealthEventRule.Arn
  ClassroomScaleUp:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Ref Frontends
      MinSize: 4
      Recurrence: <%= Cdo::Cron.weekdays_at '4am' %>
  ClassroomScaleDown:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Ref Frontends
      MinSize: 3
      Recurrence: <%= Cdo::Cron.weekdays_at '1pm' %>
  WeekendScaleDown:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Ref Frontends
      MinSize: 2
      Recurrence: <%= Cdo::Cron.weekly_at '8pm Friday' %>
  WeekendScaleUp:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Ref Frontends
      MinSize: 3
      Recurrence: <%= Cdo::Cron.weekly_at '4am Monday', time_zone: 'London' %>
<%   end -%>
<% end -%>
# Route53 (DNS) and CloudFront (CDN) resources:
# TODO hourofcode.com and csedweek.org DNS/CDN resources should be added to this template.
<%
  %w(Dashboard Pegasus).each do |app|
    app_domain = app == 'Dashboard' ? studio_subdomain : subdomain
-%>
  <%=app%>DNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: <%=domain%>.
      RecordSets:
        - Name: <%=app_domain%>
          Type: A
<%   if cdn_enabled -%>
          AliasTarget:
            DNSName: !GetAtt [<%=app%>CDN, DomainName]
            HostedZoneId: Z2FDTNDATAQYW2 # static ID for cloudfront aliases
<%   elsif load_balancer -%>
          AliasTarget:
            DNSName: !GetAtt [LoadBalancer, CanonicalHostedZoneName]
            HostedZoneId: !GetAtt [LoadBalancer, CanonicalHostedZoneNameID]
<%   else -%>
          TTL: <%= DNS_TTL %>
          ResourceRecords: [!GetAtt <%=daemon%>.PublicIp]
<%   end -%>
<%   if cdn_enabled -%>
  <%=app%>CDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig: <%= cloudfront_config(app) %>
<%   end -%>
<% end -%>
<% if cdn_enabled -%>
  OriginDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: <%=domain%>.
      RecordSets:
        - Name: "<%=subdomain('origin')%>"
          Type: A
<%   if load_balancer -%>
          AliasTarget:
            HostedZoneId: !GetAtt [LoadBalancer, CanonicalHostedZoneNameID]
            DNSName: !GetAtt [LoadBalancer, CanonicalHostedZoneName]
<%   else -%>
          TTL: <%= DNS_TTL %>
          ResourceRecords: [!GetAtt <%=daemon%>.PublicIp]
<%   end -%>
<% end -%>
<% if frontends -%>
<%   cache_node_type = rack_env?(:production) ? 'cache.r3.large' : 'cache.t2.micro' -%>
  GeocoderSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Geocoder Cache Subnet Group
      SubnetIds: <%= subnets.to_json %>
  GeocoderGroup:
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      ReplicationGroupDescription: Geocoder Replication Group
      NumCacheClusters: 3
<%  if cache_node_type.include? 'cache.t2' %>
      AutomaticFailoverEnabled: false
<%  end-%>
      Engine: redis
      CacheNodeType: <%= cache_node_type %>
      SecurityGroupIds: [!ImportValue VPC-RedisSecurityGroup]
      CacheSubnetGroupName: !Ref GeocoderSubnetGroup
  MemcachedParameterGroup:
    Type: AWS::ElastiCache::ParameterGroup
    Properties:
      CacheParameterGroupFamily: memcached1.4
      Description: Memcached modified max_item_size.
      Properties:
        max_item_size: <%=64.megabytes%>
  Memcached:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      CacheNodeType: <%= cache_node_type %>
      CacheParameterGroupName: !Ref MemcachedParameterGroup
      CacheSubnetGroupName: !Ref GeocoderSubnetGroup
      ClusterName: <%=stack_name[0..19]%> # Max 20 chars
      Engine: memcached
      NumCacheNodes: 2
      AZMode: cross-az
      PreferredAvailabilityZones: <%= availability_zones.first(2).to_json %>
      VpcSecurityGroupIds: [!ImportValue VPC-MemcachedSecurityGroup]
<% end -%>
  DaemonRole:
    Type: AWS::IAM::Role
    Properties:
      <%=service_role 'ec2'%>
      Policies:
        - PolicyName: Daemon
          PolicyDocument:
            Statement:
              # APIs used by ci:flush_cache task.
              - Effect: Allow
                Action:
                  - 'ec2:DescribeInstances'
                  - 'cloudfront:ListDistributions'
                  - 'cloudfront:CreateInvalidation'
                  - 'cloudfront:GetInvalidation'
                Resource: '*'
              # Lookup ACM certificate for ELB and CloudFront SSL.
              - Effect: Allow
                Action:
                  - 'acm:ListCertificates'
                  - 'acm:DescribeCertificate'
                Resource: '*'
              - Effect: Allow
                Action: 'cloudformation:DescribeStackEvents'
                Resource: !Ref AWS::StackId
              # Update Stack through `ci:deploy_stack` task.
              - Effect: Allow
                Action:
                  - 'cloudformation:UpdateStack'
                  - 'cloudformation:DescribeStacks'
                Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*"
              - Effect: Allow
                Action: iam:PassRole
                Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/admin/CloudFormationService"
<% if rack_env?(:production) -%>
        - PolicyName: StopInactiveAdhocInstances
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudwatch:GetMetricStatistics
                  - ec2:DescribeInstances
                Resource: '*'
              - Effect: Allow
                Action: cloudformation:DescribeStackResource
                Resource: '*'
        - PolicyName: RDSBackup
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - rds:DescribeDBInstances
                  - rds:DescribeDBClusters
                  - rds:DescribeDBClusterSnapshots
                Resource: '*'
              - Effect: Allow
                Action: rds:DescribeDBSnapshots
                Resource: !Sub "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:production"
              - Effect: Allow
                Action: rds:CopyDBSnapshot
                Resource: !Sub "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:snapshot:rds:production-*"
              - Effect: Allow
                Action: rds:CopyDBClusterSnapshot
                Resource: !Sub "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster-snapshot:rds:<%=CDO.db_cluster_id%>*"
              - Effect: Allow
                Action:
                  - rds:ModifyDBClusterSnapshotAttribute
                  - rds:CopyDBClusterSnapshot
                  - rds:DeleteDBClusterSnapshot
                  - rds:DescribeDBClusterSnapshotAttributes
                Resource: !Sub "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster-snapshot:temp-snapshot*"
              - Effect: Allow
                Action:
                  - rds:CopyDBSnapshot
                  - rds:DescribeDBSnapshots
                  - rds:DescribeDBSnapshotAttributes
                  - rds:ModifyDBSnapshotAttribute
                  - rds:DeleteDBSnapshot
                Resource: !Sub "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:snapshot:temp-snapshot-*"
              - Effect: Allow
                Action:
                  - kms:CreateGrant
                  - kms:DescribeKey
                Resource: '*'
                Condition:
                  StringEquals:
                    kms:ViaService: !Sub "rds.${AWS::Region}.amazonaws.com"
<% end -%>
      ManagedPolicyArns: [!Ref CDOPolicy]
      PermissionsBoundary: !ImportValue IAM-DevPermissions
  DaemonInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: {Roles: [!Ref DaemonRole]}
<% if daemon -%>
  <%=daemon%>:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT2H
    Properties:
      ImageId: <%=IMAGE_ID%>
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref DaemonInstanceProfile
      KeyName: <%=SSH_KEY_NAME%>
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 64
            VolumeType: gp2
      UserData:
        Fn::Base64: <%=file('bootstrap_chef_stack.sh.erb',
          resource_id: daemon,
          node_name: '$STACK',
          run_list: [
            local_mode ? 'recipe[cdo-apps]' : 'role[daemon]'
          ],
          commit: nil, # track branch
          shutdown: false,
          daemon: true
        )%>
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeviceIndex: 0
        SubnetId: !ImportValue VPC-PublicSubnet<%=azs.first%>
        GroupSet:
          - !ImportValue VPC-FrontendSecurityGroup
          - !ImportValue VPC-DaemonSecurityGroup # SSH access to frontends
<%  unless load_balancer -%>
          - !ImportValue VPC-ELBSecurityGroup # Accept HTTP traffic on daemon
<%  end -%>
<% if database %>
    DependsOn: Aurora1
<% end -%>
<%end-%>
<% if alarms %>
  DaemonStorageUtilizationAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:CDO-<%= rack_env?(:production) ? 'Urgent' : 'LowPriority'%>"
      AlarmDescription: Send page if daemon storage utilization exceeds 80% for an hour
      AlarmName: <%="#{stack_name}_daemon_high_storage_utilization" %>
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: Filesystem
          Value: '/dev/xvda1'
        - Name: MountPath
          Value: '/'
        - Name: InstanceId
          Value: <%= daemon_instance_id || "!Ref #{daemon}" %>
      EvaluationPeriods: 60
      MetricName: DiskSpaceUtilization
      Namespace: 'System/Linux'
      Period: 60
      Statistic: Average
      Threshold: 80
      TreatMissingData: missing
  DaemonMemoryUtilizationAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:CDO-<%= rack_env?(:production) ? 'Urgent' : 'LowPriority'%>"
      AlarmDescription: Send page if daemon memory utilization exceeds 87% for 5 minutes
      AlarmName: <%="#{stack_name}_daemon_high_memory_utilization" %>
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: <%= daemon_instance_id || "!Ref #{daemon}" %>
      EvaluationPeriods: 5
      MetricName: MemoryUtilization
      Namespace: 'System/Linux'
      Period: 60
      Statistic: Maximum
      Threshold: 87
      TreatMissingData: missing
<% end -%>
<% if database -%>
  AuroraCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DBClusterIdentifier: !Sub "${AWS::StackName}-cluster"
      DBClusterParameterGroupName: !Ref AuroraClusterDBParameters
      Engine: aurora-mysql
      # We will usually do engine version updates manually, since updating this requires replacement, so this value may be out of sync with cluster.
      EngineVersion: 5.7.12
      MasterUsername: !Sub "{{resolve:secretsmanager:${DatabaseSecret}:SecretString:username}}"
      MasterUserPassword: !Sub "{{resolve:secretsmanager:${DatabaseSecret}:SecretString:password}}"
      VpcSecurityGroupIds: [!ImportValue VPC-DBSecurityGroup]
      DBSubnetGroupName: !ImportValue VPC-DBSubnetGroup

<% 2.times do |i| %>
  Aurora<%=i%>:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub "${AWS::StackName}-<%=i%>"
      DBClusterIdentifier: !Ref AuroraCluster
      DBInstanceClass: db.r4.large
      DBSubnetGroupName: !ImportValue VPC-DBSubnetGroup
      Engine: aurora-mysql
      # We will usually do engine version updates manually, so don't specify an EngineVersion for the DBInstance.
<% end -%>

  AuroraClusterDBParameters:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: !Sub "Aurora DB Cluster Parameters for ${AWS::StackName}."
      Family: aurora-mysql5.7
      Parameters: {'innodb_monitor_enable': 'all'}

  DatabaseSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: !Sub "Secrets for accessing database from ${AWS::StackName} CloudFormation stack"
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DatabaseUsername}"}'
        GenerateStringKey: password
        PasswordLength: 10
        ExcludePunctuation: True
      Name: !Sub "CfnStack/${AWS::StackName}/database-secret"
<% end -%>
Outputs:
  DashboardURL:
    Value: "https://<%=studio_subdomain%>"
    Description: Dashboard URL
  PegasusURL:
    Value: "https://<%=subdomain%>"
    Description: Pegasus URL
# display information about how to ssh to console if this is a single instance adhoc environment
<% if rack_env?(:adhoc) && !frontends -%>
  SSHServerName:
    Value: <%=cdn_enabled ? subdomain('origin') : subdomain%>
    Description: SSH server name
<%end-%>