---
AWSTemplateFormatVersion: 2010-09-09
Description: AWS CloudFormation Template for Code.org application
Parameters:
  InstanceType:
    Type: String
    Default: <%=INSTANCE_TYPE%>
  Branch:
    Type: String
    Default: <%=branch%>
  ImageId:
    Type: AWS::EC2::Image::Id
    Default: <%=IMAGE_ID%>
  SSHKeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: <%=SSH_KEY_NAME%>
<% if database -%>
  DatabaseUsername:
    Type: String
    Default: master
    MaxLength: 16
<% end -%>
Resources:
  # Stack-specific IAM permissions applied to both daemon and frontends.
  CDOPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: !Sub "Application permissions for ${AWS::StackName}."
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          # Read-only access to current secrets.
          - Effect: Allow
            Action: 'secretsmanager:GetSecretValue'
            Resource:
              - <%=arn 'secretsmanager', "secret:#{environment}/cdo/*"%>
<% if database -%>
              - !Ref DatabaseSecret
<% end -%>
            Condition:
              StringEquals:
                secretsmanager:VersionStage: AWSCURRENT
          # Read-only access to bootstrap scripts.
          - Effect: Allow
            Action: 's3:GetObject'
            Resource: 'arn:aws:s3:::cdo-dist/<%=environment%>/*'
          # Instance-bootstrap CloudFormation hook.
          - Effect: Allow
            Action: 'cloudformation:SignalResource'
            Resource: <%=arn 'cloudformation', 'stack/${AWS::StackName}/*'%>
          # Forward syslog to CloudWatch Logs via cdo-cloudwatch-logger.
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutRetentionPolicy'
              - 'logs:PutLogEvents'
            Resource:
              - <%=arn 'logs', "log-group:#{environment}-syslog"%>
              - <%=arn 'logs', "log-group:#{environment}-syslog:log-stream:*"%>
              - <%=arn 'logs', 'log-group:${AWS::StackName}'%>
              - <%=arn 'logs', 'log-group:${AWS::StackName}:log-stream:*'%>
          # Put custom metrics to CloudWatch.
          - Effect: Allow
            Action: 'cloudwatch:PutMetricData'
            Resource: '*'
          # Read EC2 tags to determine Auto Scaling Group in CloudWatch Monitoring Scripts.
          - Effect: Allow
            Action: 'ec2:DescribeTags'
            Resource: '*'
          # Read/Write DCDO and Gatekeeper tables.
          # TODO: Import resources into stack.
          - Effect: Allow
            Action:
              - 'dynamodb:GetItem'
              - 'dynamodb:PutItem'
              - 'dynamodb:Scan'
            Resource:
              - <%=arn 'dynamodb', "table/#{CDO.dcdo_table_name}"%>
              - <%=arn 'dynamodb', "table/#{CDO.gatekeeper_table_name}"%>
          # Write analysis events to Firehose.
          # TODO: Import resources into stack.
          - Effect: Allow
            Action:
            - 'firehose:PutRecord'
            - 'firehose:PutRecordBatch'
            Resource: <%=arn 'firehose', 'deliverystream/analysis-events'%>
          # S3 access for student-libraries bucket
          - Effect: Allow
            Action:
              - 's3:DeleteObject'
              - 's3:DeleteObjectVersion'
              - 's3:GetObject'
              - 's3:GetObjectVersion'
              - 's3:PutObject'
              - 's3:ReplicateObject'
              - 's3:RestoreObject'
            Resource: 'arn:aws:s3:::cdo-v3-libraries/libraries_<%=environment%>/*'
          # General s3 access.
          # TODO: Further restrict permissions to grant least privilege.
          - Effect: Allow
            Action: 's3:*'
            Resource: '*'
<% if load_balancer -%>
  # TODO hourofcode.com and csedweek.org load balancers should be added to this template.
  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
<% raise "LoadBalancer name [#{stack_name}] cannot be longer than 32 characters" if stack_name.length > 32 -%>
      LoadBalancerName: !Ref AWS::StackName
      CrossZone: true
      SecurityGroups: [!ImportValue VPC-ELBSecurityGroup]
      Subnets: <%= public_subnets.to_json %>
      LBCookieStickinessPolicy:
        - PolicyName: CookieBasedPolicy
          CookieExpirationPeriod: 30
      Listeners:
        - LoadBalancerPort: 80
          InstancePort: 80
          Protocol: HTTP
          PolicyNames: [CookieBasedPolicy]
        - LoadBalancerPort: 443
          InstancePort: 80
          Protocol: HTTPS
          SSLCertificateId: <%=certificate_arn%>
          PolicyNames: [CookieBasedPolicy]
      HealthCheck:
        Target: HTTP:80/health_check
        HealthyThreshold: 2
        UnhealthyThreshold: 5
        Interval: 10
        Timeout: 5
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 300
<%   if !frontends && daemon_instance_id -%>
      Instances: [<%=daemon_instance_id%>]
<%   elsif daemon %>
      Instances:
        - !Ref <%=daemon%>
<%   end -%>

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref AWS::StackName
      SecurityGroups: [!ImportValue VPC-ELBSecurityGroup]
      Subnets: <%= public_subnets.to_json %>
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: true

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref ALBTargetGroup

  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 443
      Protocol: HTTPS
      Certificates:
      - CertificateArn: <%=certificate_arn%>
      SslPolicy: ELBSecurityPolicy-2016-08
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref ALBTargetGroup

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Ref AWS::StackName
      VpcId: !ImportValue VPC
      Port: 80
      Protocol: HTTP
      HealthCheckEnabled: true
      HealthCheckProtocol: HTTP
      HealthCheckPath: /health_check
      HealthCheckPort: 80
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      TargetGroupAttributes:
        - Key: load_balancing.algorithm.type
          Value: least_outstanding_requests
        - Key: stickiness.enabled
          Value: true
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: 30
<%   if !frontends && daemon_instance_id -%>
      Targets:
        - Id: <%=daemon_instance_id%>
          Port: 80
<%   elsif daemon %>
      Targets:
        - Id: !Ref <%=daemon%>
          Port: 80
<%   end -%>
<% end -%>

<% if frontends -%>
<%=
    erb_file 'components/ami.yml.erb',
      frontend_policies: [Ref: 'CDOPolicy'],
      frontend_properties: {
        LoadBalancerNames: [Ref: 'LoadBalancer'],
        TargetGroupARNs: [Ref: 'ALBTargetGroup']
      },
      frontend_volume_size: 64,
      ami_timeout: 'PT120M',
      build_ami: erb_file('bootstrap_chef_stack.sh.erb',
        node_name: 'ami-$INSTANCE_ID',
        daemon: false,
        run_list: [local_mode ? 'recipe[cdo-apps]' : 'role[unmonitored-frontend]']
      ),
      frontend_timeout: 'PT50M',
      build_frontend: erb_file('bootstrap_frontend.sh.erb',
        node_name: 'fe-$INSTANCE_ID'
      )
%>
<%   if environment == :production -%>
<%=    erb_file 'components/slack_events.yml.erb' %>
<%=    erb_file 'components/scaling_schedule.yml.erb'%>
<%   end -%>
<% end -%>
# Route53 (DNS) and CloudFront (CDN) resources:
# TODO hourofcode.com and csedweek.org DNS/CDN resources should be added to this template.
<%
  %w(Dashboard Pegasus).each do |app|
    app_domain = app == 'Dashboard' ? studio_subdomain : subdomain
-%>
  <%=app%>DNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: <%=domain%>.
      RecordSets:
        - Name: <%=app_domain%>
          Type: A
<%   if cdn_enabled -%>
          AliasTarget:
            DNSName: !GetAtt [<%=app%>CDN, DomainName]
            HostedZoneId: Z2FDTNDATAQYW2 # static ID for cloudfront aliases
<%   elsif load_balancer -%>
          AliasTarget:
            DNSName: !GetAtt [ALB, DNSName]
            HostedZoneId: !GetAtt [ALB, CanonicalHostedZoneID]
<%   else -%>
          TTL: <%= DNS_TTL %>
          ResourceRecords: [!GetAtt <%=daemon%>.PublicIp]
<%   end -%>
<%   if cdn_enabled -%>
  <%=app%>CDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig: <%= cloudfront_config(app) %>
<%   end -%>
<% end -%>
<% if cdn_enabled -%>
  OriginDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: <%=domain%>.
      RecordSets:
        - Name: "<%=subdomain('origin')%>"
          Type: A
<%   if load_balancer -%>
          AliasTarget:
            HostedZoneId: !GetAtt [ALB, CanonicalHostedZoneID]
            DNSName: !GetAtt [ALB, DNSName]
<%   else -%>
          TTL: <%= DNS_TTL %>
          ResourceRecords: [!GetAtt <%=daemon%>.PublicIp]
<%   end -%>
<% end -%>

<% if frontends -%>
<%=  erb_file 'components/cache.yml.erb', node_type: rack_env?(:production) && 'cache.r3.large' %>
<% end -%>

  DaemonRole:
    Type: AWS::IAM::Role
    Properties:
      <%=service_role 'ec2'%>
      Policies:
        - PolicyName: Daemon
          PolicyDocument:
            Statement:
              # APIs used by ci:flush_cache task.
              - Effect: Allow
                Action:
                  - 'ec2:DescribeInstances'
                  - 'cloudfront:ListDistributions'
                  - 'cloudfront:CreateInvalidation'
                  - 'cloudfront:GetInvalidation'
                Resource: '*'
              # Lookup ACM certificate for ELB and CloudFront SSL.
              - Effect: Allow
                Action:
                  - 'acm:ListCertificates'
                  - 'acm:DescribeCertificate'
                Resource: '*'
              - Effect: Allow
                Action: 'cloudformation:DescribeStackEvents'
                Resource: !Ref AWS::StackId
<% if daemon-%>
              - Effect: Allow
                Action: 'cloudformation:DescribeStackResource'
                Resource: !Ref AWS::StackId
<% end-%>
              # Update Stack through `ci:deploy_stack` task.
              - Effect: Allow
                Action:
                  - 'cloudformation:UpdateStack'
                  - 'cloudformation:DescribeStacks'
                Resource: <%=arn 'cloudformation', 'stack/${AWS::StackName}/*'%>
              - Effect: Allow
                Action: iam:PassRole
                Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/admin/CloudFormationService"
<% if rack_env?(:production) -%>
        - PolicyName: StopInactiveAdhocInstances
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudwatch:GetMetricStatistics
                  - ec2:DescribeInstances
                Resource: '*'
              - Effect: Allow
                Action: cloudformation:DescribeStackResource
                Resource: '*'
        - PolicyName: RDSBackup
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - rds:DescribeDBInstances
                  - rds:DescribeDBClusters
                  - rds:DescribeDBClusterSnapshots
                Resource: '*'
              - Effect: Allow
                Action: rds:DescribeDBSnapshots
                Resource: <%=arn 'rds', 'db:production'%>
              - Effect: Allow
                Action: rds:CopyDBSnapshot
                Resource: <%=arn 'rds', 'snapshot:rds:production-*'%>
              - Effect: Allow
                Action: rds:CopyDBClusterSnapshot
                Resource: <%=arn 'rds', "cluster-snapshot:rds:#{CDO.db_cluster_id}*"%>
              - Effect: Allow
                Action:
                  - rds:ModifyDBClusterSnapshotAttribute
                  - rds:CopyDBClusterSnapshot
                  - rds:DeleteDBClusterSnapshot
                  - rds:DescribeDBClusterSnapshotAttributes
                Resource: <%=arn 'rds', 'cluster-snapshot:temp-snapshot*'%>
              - Effect: Allow
                Action:
                  - rds:CopyDBSnapshot
                  - rds:DescribeDBSnapshots
                  - rds:DescribeDBSnapshotAttributes
                  - rds:ModifyDBSnapshotAttribute
                  - rds:DeleteDBSnapshot
                Resource: <%=arn 'rds', 'snapshot:temp-snapshot-*'%>
              - Effect: Allow
                Action:
                  - kms:CreateGrant
                  - kms:DescribeKey
                Resource: '*'
                Condition:
                  StringEquals:
                    kms:ViaService: !Sub "rds.${AWS::Region}.amazonaws.com"
        - PolicyName: DMSStartAndMonitorReplicationTasks
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - dms:DescribeReplicationTasks
                Resource: "*"
              - Effect: Allow
                Action:
                  - dms:DescribeTableStatistics
                  - dms:ListTagsForResource
                  - dms:StartReplicationTask
                Resource: <%=arn 'dms', 'task:*'%>
<% end -%>
      ManagedPolicyArns: [!Ref CDOPolicy]
      PermissionsBoundary: !ImportValue IAM-DevPermissions
  DaemonInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: {Roles: [!Ref DaemonRole]}
<% if daemon -%>
  <%=daemon%>:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT2H
    Metadata:
      Boot: !Sub |
        #!/bin/bash -x
        <%= indent(erb_file('bootstrap_chef_stack.sh.erb',
          node_name: '$STACK',
          run_list: [local_mode ? 'recipe[cdo-apps]' : 'role[daemon]'],
        ), 8)%>
        <%=signal_resource(daemon)%> || true
  Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref DaemonInstanceProfile
      KeyName: !Ref SSHKeyName
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 64
            VolumeType: gp2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          apt-get install -y jq
          /bin/bash -c "$(<%=get_metadata daemon, 'Boot' %>)"
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeviceIndex: 0
        SubnetId: !ImportValue VPC-PublicSubnet<%=azs.first%>
        GroupSet:
          - !ImportValue VPC-FrontendSecurityGroup
          - !ImportValue VPC-DaemonSecurityGroup # SSH access to frontends
<%  unless load_balancer -%>
          - !ImportValue VPC-ELBSecurityGroup # Accept HTTP traffic on daemon
<%  end -%>
<%  if database %>
    DependsOn: Aurora1
<%  end -%>
<%end-%>

<% if alarms %>
<%=  erb_file 'components/alarms.yml.erb'%>
<% end -%>

<% if database -%>
<%=  erb_file 'components/database.yml.erb' %>
<% end -%>

Outputs:
  DashboardURL:
    Value: "https://<%=studio_subdomain%>"
    Description: Dashboard URL
  PegasusURL:
    Value: "https://<%=subdomain%>"
    Description: Pegasus URL
# display information about how to ssh to console if this is a single instance adhoc environment
<% if rack_env?(:adhoc) && !frontends -%>
  SSHServerName:
    Value: <%=cdn_enabled ? subdomain('origin') : subdomain%>
    Description: SSH server name
<%end-%>