<%
# Template component to deploy AMI-backed frontends to an autoscaling group with rolling updates.
ami = commit[0..4]
build_ami ||= ''
build_frontend ||= 'sleep 10'
frontend_policies ||= []
frontend_properties ||= {}

params[:ImageId] ||= {Type: 'AWS::EC2::Image::Id'}
params[:SSHKeyName] ||= {Type: 'AWS::EC2::KeyPair::KeyName'}
params[:InstanceType] ||= {Type: 'String'}

ami_timeout ||= 'PT10M'
frontend_timeout ||= 'PT10M'
lifecycle_timeout ||= 1200 # seconds = 20 minutes
frontend_volume_size ||= 16
frontend_device_name ||= '/dev/sda1'
-%>
  FrontendRole:
    Type: AWS::IAM::Role
    Properties:
      <%=service_role 'ec2'%>
      Policies:
        - PolicyName: LifecycleHook
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'cloudformation:SignalResource'
                Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*"
              - Effect: Allow
                Action: 'autoscaling:CompleteLifecycleAction'
                Resource: !Sub "arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/Frontends-${AWS::StackName}"
      ManagedPolicyArns: <%=frontend_policies.to_json%>
      PermissionsBoundary: !ImportValue IAM-DevPermissions
  FrontendInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: {Roles: [!Ref FrontendRole]}
  # Signal when the instance is fully provisioned and ready for AMI creation.
  AMICreate<%=ami%>:
    Type: AWS::CloudFormation::WaitCondition
    CreationPolicy:
      ResourceSignal:
        Timeout: <%=ami_timeout%>
        Count: 1
  AMI<%=ami%>: <%= lambda_fn 'AMIManager',
    DependsOn: "AMICreate#{ami}",
    InstanceId: {Ref: "WebServerAMI" } %>
  FastSnapshotRestore: <%= lambda_fn 'FastSnapshotRestore',
    ImageIds: [{Ref: "AMI#{ami}" }],
    AvailabilityZones: AVAILABILITY_ZONES
  %>
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: FastSnapshotRestore
    Properties:
      ImageId: !GetAtt [AMI<%=ami%>, ImageId]
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref FrontendInstanceProfile
      SecurityGroups: [!ImportValue VPC-FrontendSecurityGroup]
      KeyName: !Ref SSHKeyName
      BlockDeviceMappings:
        - DeviceName: <%=frontend_device_name%>
          Ebs:
            VolumeSize: <%=frontend_volume_size%>
            VolumeType: gp2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          # This line causes the LaunchConfiguration to be replaced on each new commit.
          COMMIT=<%=commit%>
          <%=indent(build_frontend, 10)%>
          # Signal CompleteLifecycleAction, in case the frontend was launched from an Auto Scaling process.
          <%=complete_lifecycle 'WebServerHook-${AWS::StackName}', 'Frontends-${AWS::StackName}'%> || true
          # Signal CloudFormation, in case the frontend was launched from a CloudFormation stack update.
          <%=signal_resource 'Frontends'%> || true
  WebServerAMI:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref FrontendInstanceProfile
      SecurityGroupIds: [!ImportValue VPC-FrontendSecurityGroup]
      SubnetId: !ImportValue VPC-Subnet<%=azs.first%>
      KeyName: !Ref SSHKeyName
      BlockDeviceMappings:
        - DeviceName: <%=frontend_device_name%>
          Ebs:
            VolumeSize: <%=frontend_volume_size%>
            VolumeType: gp2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          # Modify cloud-init to re-run this user-data script every time instance restarts.
          sed -i 's/scripts-user$/\[scripts-user, always\]/' /etc/cloud/cloud.cfg
          <%=indent(build_ami, 10)%>
          # Signal AMI WaitCondition.
          <%=signal_resource "AMICreate#{ami}"-%> || true
          shutdown -h now
  ASGCount: <%= lambda_fn 'CountASG',
    Default: {
      MinSize: 2,
      MaxSize: 20,
      DesiredCapacity: 2
    },
    AutoScalingGroupTags: [
      {Key: 'aws:cloudformation:stack-id', Value: {Ref: 'AWS::StackId'}},
      {Key: 'aws:cloudformation:logical-id', Value: 'Frontends'}
    ],
    LaunchConfiguration: {Ref: 'LaunchConfiguration'}
  %>
  Frontends:
    DependsOn: [ASGCount]
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: <%=frontend_timeout%>
        Count: !GetAtt [ASGCount, DesiredCapacity]
      AutoScalingCreationPolicy:
        MinSuccessfulInstancesPercent: 80
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 20
        MinInstancesInService: !GetAtt [ASGCount, DesiredCapacity]
        MinSuccessfulInstancesPercent: 80
        PauseTime: <%=frontend_timeout%>
        SuspendProcesses: [ScheduledActions]
        WaitOnResourceSignals: true
    Properties:
      AutoScalingGroupName: !Sub "Frontends-${AWS::StackName}"
      MinSize: !GetAtt [ASGCount, MinSize]
      MaxSize: !GetAtt [ASGCount, MaxSize]
      DesiredCapacity: !GetAtt [ASGCount, DesiredCapacity]
      VPCZoneIdentifier: <%=subnets.to_json%>
      HealthCheckType: EC2 # TODO: use ELB health check that returns healthy even when fully loaded.
      HealthCheckGracePeriod: 2000
      LaunchConfigurationName: !Ref LaunchConfiguration
      <%=add_properties frontend_properties%>
      MetricsCollection:
        - Granularity: 1Minute
  CPUScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref Frontends
      EstimatedInstanceWarmup: 300
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 50
  WebServerHook:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      LifecycleHookName: !Sub "WebServerHook-${AWS::StackName}"
      AutoScalingGroupName: !Ref Frontends
      LifecycleTransition: 'autoscaling:EC2_INSTANCE_LAUNCHING'
      DefaultResult: ABANDON
      HeartbeatTimeout: <%=lifecycle_timeout%>
      NotificationTargetARN: !Ref WebServerHookTopic
      RoleARN: !GetAtt WebServerHookRole.Arn
  WebServerHookTopic: {Type: 'AWS::SNS::Topic'}
  WebServerHookRole:
    Type: AWS::IAM::Role
    Properties:
      <%=service_role 'autoscaling'%>
      Policies:
        - PolicyName: snsPublish
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'sns:Publish'
                Resource: !Ref WebServerHookTopic
      PermissionsBoundary: !ImportValue IAM-DevPermissions
