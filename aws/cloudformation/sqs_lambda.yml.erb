---
AWSTemplateFormatVersion: 2010-09-09
Description: SQS queue to SNS processor.
Resources:
  SqsToSnsQueue:
    Type: AWS::SQS::Queue
    Properties: {QueueName: SqsToSnsQueue}
  SqsToSns:
    Type: AWS::Lambda::Function
    DependsOn: SqsToSnsQueue
    Properties:
      Description: SQS queue to SNS processor.
      FunctionName: SqsToSns
      Code: <%=js_zip.call%>
      Handler: sqsToSns.handler
      Runtime: nodejs4.3
      Timeout: 300
      Role: {'Fn::GetAtt': [SqsToSnsRole, Arn]}
  SqsToSnsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal: {Service: [lambda.amazonaws.com]}
      Path: '/'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: ["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents"]
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action: ["sqs:*", "sns:*", "lambda:*"]
                Resource: "*"
  SqsToSnsEveryMinute:
    Type: AWS::Events::Rule
    Properties:
      Description: Invoke the SQS to SNS Lambda function every minute.
      ScheduleExpression: rate(1 minute)
      State: ENABLED
      Targets:
      - Arn: {"Fn::GetAtt": [SqsToSns, Arn]}
        Id: TargetFunctionV1
  SqsToSnsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: {Ref: SqsToSns}
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: {"Fn::GetAtt": [EveryMinute, Arn]}
