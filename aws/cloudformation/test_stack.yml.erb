<%
commit = ENV['COMMIT'] || `git rev-parse HEAD`.split.first
-%>
---
AWSTemplateFormatVersion: 2010-09-09
Description: Minimal test stack for AMI-builder.
Resources:
  DaemonRole:
    Type: AWS::IAM::Role
    Properties:
      <%=service_role 'ec2'%>
      Policies:
        - PolicyName: Daemon
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudformation:DescribeStackResource'
                  - 'cloudformation:SignalResource'
                Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*"
      PermissionsBoundary: !ImportValue IAM-DevPermissions
  DaemonInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: {Roles: [!Ref DaemonRole]}
  Daemon:
    Type: AWS::EC2::Instance
    CreationPolicy: {ResourceSignal: {Timeout: PT2H}}
    Metadata:
      Boot: !Sub |
        #!/bin/bash -x
        echo "Running boot userdata"
        touch /tmp/ran-userdata.txt
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref DaemonInstanceProfile
      KeyName: <%=SSH_KEY_NAME%>
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs: {VolumeSize: 16, VolumeType: gp2}
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          yum install -y jq
          /bin/bash -c "$(<%=get_metadata 'Daemon', 'Boot'%>)"
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !ImportValue VPC-PublicSubnet<%=azs.first%>
          GroupSet:
            - !ImportValue VPC-FrontendSecurityGroup
            - !ImportValue VPC-DaemonSecurityGroup # SSH access to frontends
            - !ImportValue VPC-ELBSecurityGroup # Accept HTTP traffic on daemon
<%=
  erb_file 'components/ami.yml.erb',
  commit: commit,
  frontend_device_name: '/dev/xvda'
-%>
<%
  params[:InstanceType] = {Type: 'String', Default: 't3.large'}
  params[:ImageId] = {
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>',
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  }
-%>
Parameters: <%=params.to_json%>
