---
AWSTemplateFormatVersion: 2010-09-09
Description: Standalone Chef role launched on a single EC2 instance, attached to a DNS entry.
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24
      EnableDnsHostnames: true
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  Internet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: {Ref: VPC}
      InternetGatewayId: {Ref: InternetGateway}
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: {Ref: VPC}
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: Internet
    Properties:
      RouteTableId: {Ref: PublicRouteTable}
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: {Ref: InternetGateway}
<%
  current_subnet = "Subnet#{availability_zone[-1].upcase}"
  availability_zones.each do |zone|
    az = zone[-1].upcase
%>
  Subnet<%=az%>:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: {Ref: VPC}
      CidrBlock: 10.0.0.0/26
      AvailabilityZone: '<%=zone%>'
      MapPublicIpOnLaunch: true
  SubnetRouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: {Ref: PublicRouteTable}
      SubnetId: {Ref: Subnet<%=az%>}
<% end %>
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP[S] + SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: <%=ssh_ip%>
      VpcId: {Ref: VPC}
<% YAML.load(File.read(aws_dir 'cloudformation', 'production_servers.yml')).each do |name, server| %>
  <%=name%>:
    Type: AWS::EC2::Instance
    DependsOn: Internet
    CreationPolicy:
      ResourceSignal:
        Timeout: PT60M
    Properties:
      ImageId: <%=image_id%>
      SecurityGroupIds: [Ref: WebServerSecurityGroup]
      SubnetId: {Ref: <%=current_subnet%>}
      InstanceType: <%=server['instance_type'] || instance_type%>
      IamInstanceProfile: {Ref: RootInstanceProfile}
      KeyName: <%=ssh_key_name%>
      Tags: [{Key: Name, Value: <%=name%>}]
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 64
            VolumeType: gp2
      UserData:
        Fn::Base64: <%=file.call('chef_role_bootstrap.sh.erb', node_name: name, run_list: server['run_list'])%>
  <%=name%>EIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: {Ref: <%=name%>}
      Domain: vpc
  <%=name%>DNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: <%=domain%>.
      RecordSets:
        - Name: "<%=server['domain']%>"
          Type: A
          TTL: 60
          ResourceRecords: [Ref: <%=name%>EIP]
<% end %>
  RootRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal: {Service: [ec2.amazonaws.com]}
            Action: ['sts:AssumeRole']
      Path: '/'
      Policies:
        - PolicyName: instance
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: ['s3:GetObject']
                Resource: 'arn:aws:s3:::<%=s3_bucket%>/*'
              - Effect: Allow
                Action: ['cloudformation:SignalResource']
                Resource: '*'
  RootInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles: [Ref: RootRole]
