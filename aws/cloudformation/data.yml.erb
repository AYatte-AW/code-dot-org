---
AWSTemplateFormatVersion: 2010-09-09
Description: Data layer for Tableau including RedShift cluster configuration and synchronization with RDS instance.
# Parameters can be provided via CDO.underscored_parameter, e.g. via locals.yml:
# redshift_password: abcdef
# Parameters are only required for initial stack creation, and reused if not provided on stack update.
Parameters:
  RDSIdentifier:
    Type: String
  <% rds = Aws::RDS::Client.new.describe_db_instances(db_instance_identifier: CDO.rds_identifier).db_instances.first -%>
  # MySQL user must have granted REPLICATION CLIENT and REPLICATION SLAVE permissions.
  # Ref: http://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.MySQL.html#CHAP_Source.MySQL.Security
  RDSUsername:
    Type: String
  RDSPassword:
    Type: String
    NoEcho: true
  RedshiftDatabase:
    Type: String
    Default: dashboard
  RedshiftUsername:
    Type: String
    Default: dev
  RedshiftPassword:
    Type: String
    NoEcho: true
Resources:
  VPC: <%= lambda.call 'LookupStackOutputs', StackName: 'VPC', Nonce: 0 %>
  Tableau:
    Type: AWS::Redshift::Cluster
    Properties:
      AllowVersionUpgrade: true
      AutomatedSnapshotRetentionPeriod: 1
      ClusterParameterGroupName: default.redshift-1.0
      ClusterSubnetGroupName: {'Fn::GetAtt': [VPC, RedshiftSubnetGroup]}
      ClusterType: single-node
      ClusterVersion: 1.0
      DBName: {Ref: RedshiftDatabase}
      Encrypted: true
      KmsKeyId: alias/aws/redshift
      MasterUsername: {Ref: RedshiftUsername}
      MasterUserPassword: {Ref: RedshiftPassword}
      NodeType: dc1.large
      PubliclyAccessible: true
      VpcSecurityGroupIds: ['Fn::GetAtt': [VPC, RedshiftSecurityGroup]]

  # DMS custom resources for configuring a replication task from the RDS read replica to the Redshift cluster for the specified tables:
  # - ReplicationSubnetGroup
  # - ReplicationInstance
  # - Endpoint
  # - ReplicationTask
  DMSSubnetGroup: <%= lambda.call 'DMS',
    CustomType: 'ReplicationSubnetGroup',
    ReplicationSubnetGroupDescription: 'DMS Private Subnet Group',
    SubnetIds: azs.map{|az| {'Fn::GetAtt' => ['VPC', "Subnet#{az}"]}}
  %>

  TableauSyncInstance: <%= lambda.call 'DMS',
    CustomType: 'ReplicationInstance',
    VpcSecurityGroupIds: ['Fn::GetAtt' => ['VPC', 'DBSecurityGroup']],
    ReplicationInstanceClass: 'dms.t2.micro',
    AvailabilityZone: rds.availability_zone, # Same AZ as the source RDS instance.
    PubliclyAccessible: false,
    ReplicationSubnetGroupIdentifier: {Ref: 'DMSSubnetGroup'}
  %>
  RDSEndpoint: <%= lambda.call 'DMS',
    CustomType: 'Endpoint',
    Type: 'source',
    EngineName: 'mysql',
    ServerName: {'Fn::GetAtt' => ['TableauSyncDB', 'Endpoint.Address']},
    Port: {'Fn::GetAtt' => ['TableauSyncDB', 'Endpoint.Port']},
    Username: {Ref: 'RDSUsername'},
    Password: {Ref: 'RDSPassword'}
  %>
  RedshiftEndpoint: <%= lambda.call 'DMS',
    CustomType: 'Endpoint'
    Type: 'target',
    EngineName: 'redshift',
    ServerName: {'Fn::GetAtt' => ['Tableau', 'Endpoint.Address']},
    Port: {'Fn::GetAtt' => ['Tableau', 'Endpoint.Port']},
    Username: {Ref: 'RedshiftUsername'},
    Password: {Ref: 'RedshiftPassword'}
  %>

  TableauSyncLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
  TableauSyncLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: {Ref: TableauSyncLogGroup}
  TableauSyncTask: <%= lambda.call 'DMS',
    CustomType: 'ReplicationTask',
    MigrationType: 'full-load-and-cdc',
    ReplicationInstanceArn: {Ref: 'TableauSyncInstance'},
    SourceEndpointArn: {Ref: 'RDSEndpoint'},
    TargetEndpointArn: {Ref: 'RedshiftEndpoint'},
    ReplicationTaskSettings: YAML.load(file.call(File.expand_path(File.join(__dir__, '../dms/replication-task-settings.yml.erb')))).to_json,
    TableMappings: YAML.load(file.call(File.expand_path(File.join(__dir__, '../dms/table-mappings.yml.erb')))).to_json
  %>

Outputs:
  Redshift:
    Description: Tableau endpoint
    Value: {Ref: Tableau}
  RedshiftAddress:
    Description: Tableau address
    Value: {"Fn::GetAtt": ["Tableau", "Endpoint.Address"]}
  RedshiftPort:
    Description: Tableau port
    Value: {"Fn::GetAtt": ["Tableau", "Endpoint.Port"]}
