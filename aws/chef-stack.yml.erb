---
AWSTemplateFormatVersion: 2010-09-09
Description: AWS CloudFormation Template for Code.org application
Resources:
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Metadata:
      Comment1: Configure the Load Balancer with a simple health check and cookie-based stickiness
      Comment2: Use install path for healthcheck to avoid redirects - ELB healthcheck does not handle 302 return codes
    Properties:
      AvailabilityZones:
        Fn::GetAZs: ''
      LBCookieStickinessPolicy:
        - PolicyName: CookieBasedPolicy
          CookieExpirationPeriod: 30
      Listeners:
        - LoadBalancerPort: 80
          InstancePort: 80
          Protocol: HTTP
          PolicyNames:
            - CookieBasedPolicy
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: 2
        UnhealthyThreshold: 5
        Interval: 10
        Timeout: 5
  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        Fn::GetAZs: ''
      LaunchConfigurationName:
        Ref: LaunchConfig
      MinSize: 1
      MaxSize: 5
      DesiredCapacity:
        Ref: WebServerCapacity
      HealthCheckType: ELB
      LoadBalancerNames:
        - Ref: ElasticLoadBalancer
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          cdo_install:
            - install_cfn
            - install_chefdk
            - install_chef
            - install_wordpress
            - run_chef
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content:
                Fn::Join:
                  - ''
                  -
                    - '[main]\n'
                    - 'stack='
                    - Ref: AWS::StackId
                    - '\n'
                    - 'region='
                    - Ref: AWS::Region
                    - '\n'
              mode: 000400
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content:
                Fn::Join:
                  - ''
                  -
                    - '[cfn-auto-reloader-hook]\n'
                    - 'triggers=post.update\n'
                    - 'path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n'
                    - 'action=/opt/aws/bin/cfn-init -v'
                    - ' --stack '
                    - Ref: AWS::StackName
                    - ' --resource LaunchConfig '
                    - ' --configsets cdo_install '
                    - ' --region '
                    - Ref: AWS::Region
                    - '\n'
                    - 'runas=root\n'
              mode: 000400
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        "install_chef" : {
          "sources" : {
            "/var/chef/chef-repo" : "http://github.com/opscode/chef-repo/tarball/master"
          },
          "files" : {
            "/tmp/install.sh" : {
              "source" : "https://www.opscode.com/chef/install.sh",
              "mode" : "000400",
              "owner" : "root",
              "group" : "root"
            },
            "/var/chef/chef-repo/.chef/knife.rb" : {
              "content" : { "Fn::Join": [ "", [
                "cookbook_path [ '/var/chef/chef-repo/cookbooks' ]\n",
                "node_path [ '/var/chef/chef-repo/nodes' ]\n"
              ]]},
              "mode" : "000400",
              "owner" : "root",
              "group" : "root"
            },
            "/var/chef/chef-repo/.chef/client.rb" : {
              "content" : { "Fn::Join": [ "", [
                "cookbook_path [ '/var/chef/chef-repo/cookbooks' ]\n",
                "node_path [ '/var/chef/chef-repo/nodes' ]\n"
              ]]},
              "mode" : "000400",
              "owner" : "root",
              "group" : "root"
            }
          },
          "commands" : {
            "01_make_chef_readable" : {
              "command" : "chmod +rx /var/chef"
            },
            "02_install_chef" : {
              "command" : "bash /tmp/install.sh",
              "cwd" : "/var/chef"
            },
            "03_create_node_list" : {
              "command" : "chef-client -z -c /var/chef/chef-repo/.chef/client.rb",
              "cwd" : "/var/chef/chef-repo",
              "env" : { "HOME" : "/var/chef" }
            }
          }
        },
        "install_chefdk" : {
          "packages" : {
            "rpm" : {
              "chefdk" : "https://opscode-omnibus-packages.s3.amazonaws.com/el/6/x86_64/chefdk-0.2.0-2.el6.x86_64.rpm"
            }
          }
        },
        "install_wordpress" : {
          "files" : {
            "/var/chef/chef-repo/.chef/knife.rb" : {
              "content" : { "Fn::Join": [ "", [
                "cookbook_path [ '/var/chef/chef-repo/cookbooks/wordpress/berks-cookbooks' ]\n",
                "node_path [ '/var/chef/chef-repo/nodes' ]\n"
              ]]},
              "mode" : "000400",
              "owner" : "root",
              "group" : "root"
            },
            "/var/chef/chef-repo/.chef/client.rb" : {
              "content" : { "Fn::Join": [ "", [
                "cookbook_path [ '/var/chef/chef-repo/cookbooks/wordpress/berks-cookbooks' ]\n",
                "node_path [ '/var/chef/chef-repo/nodes' ]\n"
              ]]},
              "mode" : "000400",
              "owner" : "root",
              "group" : "root"
            },
            "/var/chef/chef-repo/cookbooks/wordpress/attributes/aws_rds_config.rb" : {
              "content": { "Fn::Join": [ "", [
                "normal['wordpress']['db']['pass'] = '", {"Ref" : "DBPassword"}, "'\n",
                "normal['wordpress']['db']['user'] = '", {"Ref" : "DBUsername"}, "'\n",
                "normal['wordpress']['db']['host'] = '", {"Fn::GetAtt" : ["DBInstance", "Endpoint.Address"]}, "'\n",
                "normal['wordpress']['db']['name'] = '", {"Ref" : "DBName"}, "'\n"
              ]]},
              "mode" : "000400",
              "owner" : "root",
              "group" : "root"
            }
          },
          "commands" : {
            "01_get_cookbook" : {
              "command" : "knife cookbook site download wordpress",
              "cwd" : "/var/chef/chef-repo",
              "env" : { "HOME" : "/var/chef" }
            },
            "02_unpack_cookbook" : {
              "command" : "tar xvfz /var/chef/chef-repo/wordpress*",
              "cwd" : "/var/chef/chef-repo/cookbooks"
            },
            "03_init_berkshelf": {
              "command" : "berks init /var/chef/chef-repo/cookbooks/wordpress --skip-vagrant --skip-git",
              "cwd" : "/var/chef/chef-repo/cookbooks/wordpress",
              "env" : { "HOME" : "/var/chef" }
            },
            "04_vendorize_berkshelf" : {
              "command" : "berks vendor",
              "cwd" : "/var/chef/chef-repo/cookbooks/wordpress",
              "env" : { "HOME" : "/var/chef" }
            },
            "05_configure_node_run_list" : {
              "command" : "knife node run_list add -z `knife node list -z` recipe[wordpress]",
              "cwd" : "/var/chef/chef-repo",
              "env" : { "HOME" : "/var/chef" }
            }
          }
        },
        "run_chef" : {
          "commands" : {
            "01_run_chef_client" : {
              "command" : "chef-client -z -c /var/chef/chef-repo/.chef/client.rb",
              "cwd" : "/var/chef/chef-repo",
              "env" : { "HOME" : "/var/chef" }
            }
          }
        }
      }
    },
    Properties:
      ImageId: <%= ENV['IMAGE_ID'] %>,
      InstanceType: <%= ENV['INSTANCE_TYPE'] %>
      SecurityGroups:
        - Ref: WebServerSecurityGroup
      KeyName: <%= ENV['SSH_KEY_NAME'] %>
      UserData:
        Fn::Base64:
          Fn::Join
            - ''
            -
              - "#!/bin/bash -xe\n"
              - "apt-get update\n"
              - "apt-get -y install python-pip\n"
              - "pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n"
              - "cp /usr/local/init/ubuntu/cfn-hup /etc/init.d/cfn-hup \n"
              - "chmod +x /etc/init.d/cfn-hup \n"
              - "update-rc.d cfn-hup defaults \n"
              - "service cfn-hup start \n"

              - "/opt/aws/bin/cfn-init -v "
              - "--stack "
              - Ref: AWS::StackName
              - " --resource LaunchConfig "
              - " --configsets cdo_install "
              - " --region "
              - Ref: AWS::Region
              - "\n"
              - "/opt/aws/bin/cfn-signal -e $? "
              - " --stack "
              - Ref: AWS::StackName
              - " --resource Server "
              - " --region "
              - Ref: AWS::Region
              - "\n"
        "/opt/aws/bin/cfn-init ",
        " --stack ", { "Ref" : "AWS::StackName" },
        " --resource LaunchConfig ",
        " --configsets wordpress_install ",
        " --region ", { "Ref" : "AWS::Region" }, "\n",
        "/opt/aws/bin/cfn-signal -e $? '", { "Ref" : "WebServerWaitHandle" }, "'\n"
      ]]}}
    }
  },
  WebServerWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  WebServerWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: WebServerGroup
    Properties:
      Handle:
        Ref: WebServerWaitHandle
      Timeout: 900
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 locked down to the load balancer + SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupOwnerId:
            Fn::GetAtt:
              - ElasticLoadBalancer
              - SourceSecurityGroup.OwnerAlias
          SourceSecurityGroupName:
            Fn::GetAtt:
              - ElasticLoadBalancer
              - SourceSecurityGroup.GroupName
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: <%= ENV['SSH_IP'] %>
Outputs:
  WebsiteURL:
    Value:
      Fn::Join:
        - ''
        -
          - 'http://'
          - Fn::GetAtt:
            - ElasticLoadBalancer
            - DNSName
    Description: website URL
