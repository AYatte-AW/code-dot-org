---
AWSTemplateFormatVersion: 2010-09-09
Description: AWS CloudFormation Template for Code.org application
Resources:
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Metadata:
      Comment1: Configure the Load Balancer with a simple health check and cookie-based stickiness
      Comment2: Use install path for healthcheck to avoid redirects - ELB healthcheck does not handle 302 return codes
    Properties:
      AvailabilityZones:
        Fn::GetAZs: ''
      LBCookieStickinessPolicy:
        - PolicyName: CookieBasedPolicy
          CookieExpirationPeriod: 30
      Listeners:
        - LoadBalancerPort: 80
          InstancePort: 80
          Protocol: HTTP
          PolicyNames:
            - CookieBasedPolicy
      HealthCheck:
        Target: HTTP:80/health_check.php
        HealthyThreshold: 2
        UnhealthyThreshold: 5
        Interval: 10
        Timeout: 5
  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        Fn::GetAZs: ''
      LaunchConfigurationName:
        Ref: LaunchConfig
      MinSize: 1
      MaxSize: 5
      DesiredCapacity: 2
      HealthCheckType: ELB
      HealthCheckGracePeriod: 4000
      LoadBalancerNames:
        - Ref: ElasticLoadBalancer
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
#     Boilerplate for installing and enabling AWS CloudFormation utilities.
      AWS::CloudFormation::Init:
        configSets:
          cdo_install:
            - install_cfn
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content:
                Fn::Join:
                  - ''
                  -
                    - '[main]\n'
                    - 'stack='
                    - Ref: AWS::StackId
                    - '\n'
                    - 'region='
                    - Ref: AWS::Region
                    - '\n'
              mode: 000400
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content:
                Fn::Join:
                  - ''
                  -
                    - '[cfn-auto-reloader-hook]\n'
                    - 'triggers=post.update\n'
                    - 'path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n'
                    - 'action=/usr/local/bin/cfn-init -v'
                    - ' --stack '
                    - Ref: AWS::StackName
                    - ' --resource LaunchConfig '
                    - ' --configsets cdo_install '
                    - ' --region '
                    - Ref: AWS::Region
                    - '\n'
                    - 'runas=root\n'
              mode: 000400
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      ImageId: <%= ENV['IMAGE_ID'] || 'ami-d05e75b8' %>
      InstanceType: <%= ENV['INSTANCE_TYPE'] || 'c3.8xlarge' %>
      SecurityGroups:
        - Ref: WebServerSecurityGroup
      KeyName: <%= ENV['SSH_KEY_NAME'] || 'server_access_key' %>
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 64
            VolumeType: gp2
      UserData:
        Fn::Base64:
          Fn::Join:
            - ''
            -
              - "#!/bin/bash -xe\n"
              - "apt-get update\n"
              - "apt-get -y install python-pip\n"
              - "pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n"
              - "cp /usr/local/init/ubuntu/cfn-hup /etc/init.d/cfn-hup \n"
              - "chmod +x /etc/init.d/cfn-hup \n"
              - "update-rc.d cfn-hup defaults \n"
              - "service cfn-hup start \n"

              - "/usr/local/bin/cfn-init -v "
              - "--stack "
              - Ref: AWS::StackName
              - " --resource LaunchConfig "
              - " --configsets cdo_install "
              - " --region "
              - Ref: AWS::Region
              - "\n"
              - "sudo -u ubuntu bash -c 'curl https://s3.amazonaws.com/cdo-dist/cdo-bootstrap.sh | sudo bash -s -- -b <%= `git rev-parse --abbrev-ref HEAD` %> -r \"recipe[cdo-apps]\"'"
              - "\n"
              - "/usr/local/bin/cfn-signal -e $? '"
              - Ref: WebServerWaitHandle
              - "'\n"
  WebServerWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  WebServerWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: WebServerGroup
    Properties:
      Handle:
        Ref: WebServerWaitHandle
      Timeout: 4000
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 locked down to the load balancer + SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupOwnerId:
            Fn::GetAtt:
              - ElasticLoadBalancer
              - SourceSecurityGroup.OwnerAlias
          SourceSecurityGroupName:
            Fn::GetAtt:
              - ElasticLoadBalancer
              - SourceSecurityGroup.GroupName
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: <%= ENV['SSH_IP'] || '0.0.0.0/0' %>
Outputs:
  WebsiteURL:
    Value:
      Fn::Join:
        - ''
        -
          - 'http://'
          - Fn::GetAtt:
            - ElasticLoadBalancer
            - DNSName
    Description: website URL
