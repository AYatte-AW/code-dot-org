#Template: https://github.com/sysown/proxysql/blob/v2.0.3/etc/proxysql.cnf
#file proxysql.cfg

########################################################################################
# This config file is parsed using libconfig , and its grammar is described in:        
# http://www.hyperrealm.com/libconfig/libconfig_manual.html#Configuration-File-Grammar 
# Grammar is also copied at the end of this file                                       
########################################################################################

########################################################################################
# IMPORTANT INFORMATION REGARDING THIS CONFIGURATION FILE:                             
########################################################################################
# On startup, ProxySQL reads its config file (if present) to determine its datadir. 
# What happens next depends on if the database file (disk) is present in the defined
# datadir (i.e. "/var/lib/proxysql/proxysql.db").
#
# If the database file is found, ProxySQL initializes its in-memory configuration from 
# the persisted on-disk database. So, disk configuration gets loaded into memory and 
# then propagated towards the runtime configuration. 
#
# If the database file is not found and a config file exists, the config file is parsed 
# and its content is loaded into the in-memory database, to then be both saved on-disk 
# database and loaded at runtime.
#
# IMPORTANT: If a database file is found, the config file is NOT parsed. In this case
#            ProxySQL initializes its in-memory configuration from the persisted on-disk
#            database ONLY. In other words, the configuration found in the proxysql.cnf
#            file is only used to initial the on-disk database read on the first startup.
#
# In order to FORCE a re-initialise of the on-disk database from the configuration file 
# the ProxySQL service should be started with "service proxysql initial".
#
########################################################################################

datadir="/var/lib/proxysql"
errorlog="/var/lib/proxysql/proxysql.log"

admin_variables=
{
  admin_credentials="<%=@admin.user%>:<%=@admin.password%>"
  mysql_ifaces="<%=@admin.host%>:<%=@admin.port%>"
}

mysql_variables=
{
  threads=4
  max_stmts_per_connection=1024
  max_connections=2048
  default_query_delay=0
  default_query_timeout=36000000
  have_compress=true
  poll_timeout=2000
  interfaces="127.0.0.1:<%= @port %>"
  default_schema="information_schema"
  stacksize=1048576
  server_version="5.7.12-proxysql"
  connect_timeout_server=3000
# make sure to configure monitor username and password
# https://github.com/sysown/proxysql/wiki/Global-variables#mysql-monitor_username-mysql-monitor_password
  monitor_username="<%= @writer.user %>"
  monitor_password="<%= @writer.password %>"
  monitor_history=600000
  monitor_connect_interval=60000
  monitor_ping_interval=10000
  monitor_read_only_interval=1500
  monitor_read_only_timeout=500
  ping_interval_server_msec=120000
  ping_timeout_server=500
  commands_stats=true
  sessions_sort=true
  connect_retries_on_failure=10
}

mysql_servers =
(
  {
    address = "<%= @writer.hostname %>"
    port = <%= @writer.port || 3306 %>
    hostgroup = 0
  },
  {
    address = "<%= @reader.hostname %>"
    port = <%= @reader.port || 3306 %>
    max_replication_lag = 1  # If replication lag exceeds 1 sec, the reader is shunned
    hostgroup = 1
  }
)

mysql_users:
(
<% if @writer.user != @reader.user -%>
  {
    username = "<%= @reader.user %>"
    password = "<%= @reader.password %>"
  },
<% end -%>
  {
    username = "<%= @writer.user %>"
    password = "<%= @writer.password %>"
  }
)

mysql_query_rules:
(
  {
    rule_id=1
    active=1
    match_pattern="^SELECT .* FOR UPDATE$"
    destination_hostgroup=0
    apply=1
  },
  {
    rule_id=2
    active=1
    match_pattern="FROM `ar_internal_metadata`"
    destination_hostgroup=0
    apply=1
  },
  {
    rule_id=3
    active=0 # Set to 1 to enable global read-write split
    match_pattern="^SELECT"
    destination_hostgroup=1
    apply=1
  },
  {
    rule_id=4
    active=1
    match_digest="SET SQL_AUTO_IS_NULL"
    multiplex=1
  },
  {
    rule_id=5
    active=1
    match_digest="SET @@wait_timeout"
    multiplex=1
  },
  {
    rule_id=6
    active=1
    match_pattern="SET FOREIGN_KEY_CHECKS = (\d+)"
    replace_pattern="SET FOREIGN_KEY_CHECKS=\1"
  },
  {
    rule_id=7
    active=1
    match_pattern="SET FOREIGN_KEY_CHECKS=\d+"
    multiplex=0
  }
)

scheduler=
(
)

# http://www.hyperrealm.com/libconfig/libconfig_manual.html#Configuration-File-Grammar
#
# Below is the BNF grammar for configuration files. Comments and include directives are not part of the grammar, so they are not included here. 
#
# configuration = setting-list | empty
#
# setting-list = setting | setting-list setting
#     
# setting = name (":" | "=") value (";" | "," | empty)
#     
# value = scalar-value | array | list | group
#     
# value-list = value | value-list "," value
#     
# scalar-value = boolean | integer | integer64 | hex | hex64 | float
#                | string
#     
# scalar-value-list = scalar-value | scalar-value-list "," scalar-value
#     
# array = "[" (scalar-value-list | empty) "]"
#     
# list = "(" (value-list | empty) ")"
#     
# group = "{" (setting-list | empty) "}"
#     
# empty =
