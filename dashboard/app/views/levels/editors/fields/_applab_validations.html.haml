.field
  = f.label 'Log Conditions'
  Create a JSON array resembling the example if you want to add requirements that certain functions were executed. These will be checked when the Finish button is pressed.
  %pre
    = preserve do
      :escaped
        Example:
        [
          { "entries": ["function1", "function2"], "matchType": "exact", "minTimes": 1, "message": "You need to call both functions." },
          { "entries": ["[forTest]", "moveTo", "randomNumber", "randomNumber"], "matchType": "inexact", "minTimes": 20, "message": "You need to call moveTo in a for loop." }
        ]
  = f.text_area 'log_conditions', placeholder: 'Insert JSON Data', rows: 4, value: @level.log_conditions ? JSON.pretty_generate(@level.log_conditions) : ''
  :javascript
    levelbuilder.initializeCodeMirror('level_log_conditions', 'javascript');

.field
  = f.label 'Unit Tests'
  Unit tests are executed in the context of the student code when Run is clicked right after student code is run. Results are sent to the server and displayed only to teachers.
  = f.text_area 'unit_tests', placeholder: 'Put tests here', rows: 4, value: @level.unit_tests ? @level.unit_tests : ''
  - if @level.unit_tests_gist_id
    %a{href: "https://gist.github.com/#{@level.unit_tests_gist_id}/revisions", target: '_blank', rel:'noopener noreferrer'}
      Version History

  :javascript
    levelbuilder.initializeCodeMirror('level_unit_tests', 'javascript');

.field
  = render partial: 'levels/editors/fields/checkboxes', locals: {f: f, field_name: 'fail_on_lint_errors', description: "Fail on lint errors"}
  %p
    Lint warnings and errors (in the editor's gutter area) will prevent the student from continuing when the Finish button is pressed.
